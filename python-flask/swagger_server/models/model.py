# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Model(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, model_id: str=None, name: str=None, maintainer: str=None, version: str=None):  # noqa: E501
        """Model - a model defined in Swagger

        :param model_id: The model_id of this Model.  # noqa: E501
        :type model_id: str
        :param name: The name of this Model.  # noqa: E501
        :type name: str
        :param maintainer: The maintainer of this Model.  # noqa: E501
        :type maintainer: str
        :param version: The version of this Model.  # noqa: E501
        :type version: str
        """
        self.swagger_types = {
            'model_id': str,
            'name': str,
            'maintainer': str,
            'version': str
        }

        self.attribute_map = {
            'model_id': 'modelID',
            'name': 'name',
            'maintainer': 'maintainer',
            'version': 'version'
        }

        self._model_id = model_id
        self._name = name
        self._maintainer = maintainer
        self._version = version

    @classmethod
    def from_dict(cls, dikt) -> 'Model':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Model of this Model.  # noqa: E501
        :rtype: Model
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_id(self) -> str:
        """Gets the model_id of this Model.


        :return: The model_id of this Model.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id: str):
        """Sets the model_id of this Model.


        :param model_id: The model_id of this Model.
        :type model_id: str
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")  # noqa: E501

        self._model_id = model_id

    @property
    def name(self) -> str:
        """Gets the name of this Model.


        :return: The name of this Model.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Model.


        :param name: The name of this Model.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def maintainer(self) -> str:
        """Gets the maintainer of this Model.


        :return: The maintainer of this Model.
        :rtype: str
        """
        return self._maintainer

    @maintainer.setter
    def maintainer(self, maintainer: str):
        """Sets the maintainer of this Model.


        :param maintainer: The maintainer of this Model.
        :type maintainer: str
        """
        if maintainer is None:
            raise ValueError("Invalid value for `maintainer`, must not be `None`")  # noqa: E501

        self._maintainer = maintainer

    @property
    def version(self) -> str:
        """Gets the version of this Model.


        :return: The version of this Model.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this Model.


        :param version: The version of this Model.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version
