openapi: "3.0.0"
info:
  description: |
    Specification of the flame API
  version: "0.2"
  title: Flame API
  license:
    name: GLP v3 and posterior
    url: https://www.gnu.org/licenses/gpl-3.0.en.html

tags:
  - name: predict
    description: Predict interface
  - name: build
    description: Build models
  - name: manage
    description: Manage models, versioning, etc.
  - name: uploadSDF
    description: Uploads SDF to the server

#==================
# PATHS
#==================
paths:
  #--------
  # MANAGE
  #--------
  
  # CREATE
  /manage/create/modelname/{modelname}:
    post:
      tags:
        - manage
      summary: create a new model
      parameters:
        - in: path
          name: modelname
          description: model name
          required: true
          schema:
            type: string
      
      responses:
        "201":
          description: The model has been created succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model"
  
        "400":
          $ref: "#/components/schemas/BadRequest"
        "409":
          $ref: "#/components/schemas/ResourceAlreadyExists"
        "500":
          $ref: "#/components/schemas/InternalServerError"

    
  # LIST
  /manage/list:
    get:
      tags:
        - manage
      summary: retrieve list of available models
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of Models to return. Default to all.

      responses:
        "200":
          description: requested models
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Model"
        "400":
          $ref: "#/components/schemas/BadRequest"
        "404":
          $ref: "#/components/schemas/ModelNotFound"
        "500":
          $ref: "#/components/schemas/InternalServerError"
        "501":
          $ref: "#/components/schemas/NotImplemented"
        "503":
          $ref: "#/components/schemas/ServiceUnavailable"

  /manage/list/modelname/{modelname}:
    get:
      tags:
        - manage
      summary: retrieve list of available versions of the given model
      parameters:
        - name: modelname
          in: path
          description: model name
          required: true
          schema:
            type: string

      responses:
        "200":
          description: requested versions of Model
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        
        "400":
          $ref: "#/components/schemas/BadRequest"
        "404":
          $ref: "#/components/schemas/ModelNotFound"
        "500":
          $ref: "#/components/schemas/InternalServerError"
        "503":
          $ref: "#/components/schemas/ServiceUnavailable"
          
  # /manage/dir:
  #   get:
  #     tags:
  #       - manage
  #     description: gets models and versions?
      
  # INFO
  /manage/info/modelname/{modelname}/version/{version}:
    get:
      tags:
        - manage
      summary: retrieve information of of given Model
      parameters:
        - name: modelname
          in: path
          description: model name
          required: true
          schema:
            type: string
        
        - name: version
          in: path
          description: version of the model to get info from
          required: true
          schema:
            type: string
      
      responses:
        "200":
          description: requested info of model and version
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelInfo"
      
        "400":
          $ref: "#/components/schemas/BadRequest"
        "404":
          $ref: "#/components/schemas/ModelNotFound"
        "500":
          $ref: "#/components/schemas/InternalServerError"
        "501":
          $ref: "#/components/schemas/NotImplemented"
        "503":
          $ref: "#/components/schemas/ServiceUnavailable"
  
  # DELETE
  /manage/remove_version/modelname/{modelname}/version/{version}:
    summary: Removes a model version
    delete:
      tags:
        - manage
      parameters:
        - name: modelname
          in: path
          description: model name
          required: true
          schema:
            type: string
        
        - name: version
          in: path
          description: version of the model to get info from
          required: true
          schema:
            type: string
      
      responses:
        "204":
          description: version deleted
        "400":
          $ref: "#/components/schemas/BadRequest"
        "404":
          $ref: "#/components/schemas/VersionNotFound"
        "500":
          $ref: "#/components/schemas/InternalServerError"
        "503":
          $ref: "#/components/schemas/ServiceUnavailable"
        

  /manage/remove_model/modelname/{modelname}:
    summary: Removes a model and all of its versions. Delete resource
    delete:
      tags:
        - manage
      parameters:
        - name: modelname
          in: path
          description: model name
          required: true
          schema:
            type: string
      responses:
        "204":
          description: model delete
        "400":
          $ref: "#/components/schemas/BadRequest"
        "404":
          $ref: "#/components/schemas/VersionNotFound"
        "500":
          $ref: "#/components/schemas/InternalServerError"
        "503":
          $ref: "#/components/schemas/ServiceUnavailable"
  
  # PUBLISH
  /manage/publish/modelname/{modelname}:
    post:
      tags:
        - manage
  
  # RESULTS
  /manage/results:
    get:
      tags:
        - manage
  
  /manage/parameters:
    get:
      tags:
        - manage
  /manage/report:
    get:
      tags:
        - manage
        
  #----------
  # PREDICT
  #----------
  /predict/modelID/{modelID}:
    post:
      tags:
        - predict
      description: 'uploads molecules and runs prediction with specified model '
      summary: 'uploads molecules and runs prediction with specified model '
      operationId: Predict
      parameters:
        - in: path
          required: true
          name: modelID
          description: model id to run prediction with
          schema:
            type: string
      
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      
      responses:
        '200':
          description: prerdiction successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PredictionResults'
  
  #-------
  # BUILD
  #-------
  /build/modelID/{modelID}:
    post:
      tags:
        - build
      description: Trains the model with parameters

#======================
# COMPONENTS
#======================

components:
  schemas:
    AnyValue:
      nullable: true
      description: Can be any value, including `null`.
    
    # MODEL
    Model:
      type: object
      properties:
        modelID:
          type: string
          format: uuid
        modelNname:
          type: string
        versions:
          type: array
          items:
            type: string
      example:
        modelID: d290f1ee
        modelName: CACO2
        versions: ["0"]
    

    # MODEL RESULTS
    PredictionResults:
      type: object
      properties:
        molId:
          description: Molecule ID, name or index
          type: string
        predictResults:
          description: Estimator output for that molecule
          type: object
    
    # MODEL INFO
    ModelInfo:
      type: array
      items:
        type: object
        properties:
          varName:
            type: string
          varDescription:
            type: string
          values:
            $ref: "#/components/schemas/AnyValue"
      example: |
        [
          {
            varName: "nobj",
            varDescription: "number of objects",
            values: 100
          },
          {
            varName: "model"
            varDescription: "model type"
            values: "RF quantitave"
          },
          ...
        ]
        
    UnauthorizedError:
      description: Access token is missing or invalid

    BadRequest:
      description: Invalid input parameter

    ModelNotFound:
      description: Model not found
    
    VersionNotFound:
      description: Version not found
    
    ResourceAlreadyExists:
      description: The model already exists or the name is used by another model

    InternalServerError:
      description: The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.

    NotImplemented:
      description: The request method is not supported by the server and cannot be handled.

    ServiceUnavailable:
      description: The server is not ready to handle the request.