openapi: "3.0.0"
info:
  description: |
    Specification of the flame API
  version: "1"
  title: Flame API
  license:
    name: GLP v3 and posterior
    url: https://www.gnu.org/licenses/gpl-3.0.en.html

tags:
  - name: predict
    description: Predict interface
  - name: build
    description: Build models
  - name: manage
    description: Manage models, versioning, etc.
  #- name: user
  #  description: user with acces to prediction and basic manage
  #- name: modeler
  #  description: model developer with acces to all of the api'''

#==================
# PATHS
#==================
paths:
  #--------
  # MANAGE
  #--------
  # LIST
  /manage/models:
    get:
      tags:
        - manage
        #- user
      summary: Model list
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of Models to return. Default to all.

      responses:
        "200":
          description: requested models
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Model"
        "400":
          $ref: "#/components/schemas/BadRequest"
        "404":
          $ref: "#/components/schemas/ModelNotFound"
        "500":
          $ref: "#/components/schemas/InternalServerError"
        "501":
          $ref: "#/components/schemas/NotImplemented"
        "503":
          $ref: "#/components/schemas/ServiceUnavailable"
  
  /manage/import:
    post:
      tags:
        - manage
      summary: Import model
      description: import the new model from selecetd tar file
      parameters:
        - in: path
          name: tarfile
          description: tarfile with the modle to import
          required: true
          schema:
            type: tarfile
      responses:
        "200":
          description: model name
  
  /manage/model/{modelname}:
    # CREATE
    post:
      tags:
        - manage
        #- modeler
      description: create a new model with the given name
      summary: New model
      parameters:
        - in: path
          name: modelname
          description: model name
          required: true
          schema:
            type: string
      
      responses:
        "201":
          description: The model has been created succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model"
  
        "400":
          $ref: "#/components/schemas/BadRequest"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "409":
          $ref: "#/components/schemas/ResourceAlreadyExists"
        "500":
          $ref: "#/components/schemas/InternalServerError"

    # GET INFO
    get:
      tags:
        - manage
        #- user
      description: retrieve information of of given Model
      summary: Model info
      parameters:
        - name: modelname
          in: path
          description: model name
          required: true
          schema:
            type: string
      
      responses:
        "200":
          description: requested info of model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelInfo"
      
        "400":
          $ref: "#/components/schemas/BadRequest"
        "404":
          $ref: "#/components/schemas/ModelNotFound"
        "500":
          $ref: "#/components/schemas/InternalServerError"
        "501":
          $ref: "#/components/schemas/NotImplemented"
        "503":
          $ref: "#/components/schemas/ServiceUnavailable"
    
    # PUBLISH MODEL
    put:
      tags:
        - manage
        #- modeler
      description: create a new version via flame publish method
      summary: New version
      parameters:
        - in: path
          name: modelname
          description: name of the model that will be published
          required: true
          schema:
            type: string
      responses:
        "201":
          description: The model version has been created succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model"
                
        "400":
          $ref: "#/components/schemas/BadRequest"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "404":
          $ref: "#/components/schemas/ModelNotFound"
        "500":
          $ref: "#/components/schemas/InternalServerError"
        
        
    # DELETE MODEL
    delete:
      tags:
        - manage
        #- modeler
      description: delete model
      summary: Delete model
      parameters:
        - name: modelname
          in: path
          description: model name
          required: true
          schema:
            type: string
      responses:
        "204":
          description: model deleted
        "400":
          $ref: "#/components/schemas/BadRequest"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "404":
          $ref: "#/components/schemas/ModelNotFound"
        "500":
          $ref: "#/components/schemas/InternalServerError"
        "503":
          $ref: "#/components/schemas/ServiceUnavailable"

  /manage/model/{modelname}/export:
    get:
      tags:
        - manage
      description: export model selected as a tar file
      summary:  export model selected
      parameters:
        - in: path
          name: model name
          description: name of the model to export
          required: true
          schema:
            type: string
      responses:
        "200":
          description: requested info of version
  
  /manage/model/{modelname}/version/{version}:
    get:
      tags:
        - manage
        #- user
      description: retrive information about the model version
      summary: Version info
      parameters:
        - in: path
          name: modelname
          description: name of the model that will be build
          required: true
          schema:
            type: string
        - in: path
          name: version
          description: version of the model
          required: true
          schema:
            type: string
      
      responses:
        "200":
          description: requested info of version
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelInfo"
      
        "400":
          $ref: "#/components/schemas/BadRequest"
        "404":
          $ref: "#/components/schemas/ModelNotFound"
        "500":
          $ref: "#/components/schemas/InternalServerError"
        "501":
          $ref: "#/components/schemas/NotImplemented"
        "503":
          $ref: "#/components/schemas/ServiceUnavailable"

    delete:
      tags:
        - manage
        #- modeler
      description: delete version
      summary: Delete version
      parameters:
        - name: modelname
          in: path
          description: model name
          required: true
          schema:
            type: string
        
        - name: version
          in: path
          description: version of the model to get info from
          required: true
          schema:
            type: string
      
      responses:
        "204":
          description: version deleted
        "400":
          $ref: "#/components/schemas/BadRequest"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "404":
          $ref: "#/components/schemas/VersionNotFound"
        "500":
          $ref: "#/components/schemas/InternalServerError"
        "503":
          $ref: "#/components/schemas/ServiceUnavailable"
   
  # PARAMETERS 
  /manage/model/{modelname}/version/{version}/parameters:
    get:
      tags:
        - manage
        #- user
      description: retrieve model parameters
      summary: Model parameters
      parameters:
        - name: modelname
          in: path
          description: model name
          required: true
          schema:
            type: string
        - name: version
          in: path
          description: version of the model to get info from
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelParameters"
        "400":
          $ref: "#/components/schemas/BadRequest"
        "404":
          $ref: "#/components/schemas/ModelNotFound"
        "500":
          $ref: "#/components/schemas/InternalServerError"
        "503":
          $ref: "#/components/schemas/ServiceUnavailable"
    
    put: 
    # upload and update parameters
      tags:
        - manage
        #- modeler
      description: update model parameters
      summary: Update model parameters
      parameters:
        - name: modelname
          in: path
          description: model name
          required: true
          schema:
            type: string
        - name: version
          in: path
          description: version of the model to get info from
          required: true
          schema:
            type: string
            
      requestBody: # "deltas"
        description: subset parameters to sent to the server 
          as _deltas_ and update the model params
        required: true
        content:
          application/json: {}  # undefined for now

      responses:
        "200":
          description: Model parameters updated OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelParameters"
        "400":
          $ref: "#/components/schemas/BadRequest"
        "401":
          $ref: "#/components/schemas/UnauthorizedError"
        "404":
          $ref: "#/components/schemas/ModelNotFound"
        "500":
          $ref: "#/components/schemas/InternalServerError"
        "503":
          $ref: "#/components/schemas/ServiceUnavailable"

  #---------
  # BUILD
  #---------
  # PLACE SDF IN POST IN BODY
  /manage/model/{modelname}/version/{version}/validation:
    get:
      tags:
        - manage
        #- user
      description: retrieve model parameters
      summary: Model parameters
      parameters:
        - name: modelname
          in: path
          description: model name
          required: true
          schema:
            type: string
        - name: version
          in: path
          description: version of the model to get info from
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelParameters"
        "400":
          $ref: "#/components/schemas/BadRequest"
        #"404":
        #  $ref: "#/components/schemas/ModelNotFound"
        #"500":
        #  $ref: "#/components/schemas/InternalServerError"
        #"503":
        #  $ref: "#/components/schemas/ServiceUnavailable"

  /build/model/{modelname}:
    post:
      tags:
        - build
        #- modeler
      description: Build model with the present SDF in the body as training set. Always builds version 0
      summary: Build model
      parameters:
        - in: path
          name: modelname
          description: name of the model that will be build
          required: true
          schema:
            type: string

      requestBody:
        description: training SDF to build the model with
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                SDF:
                  type: string
                  format: binary
                modelParams:
                  $ref: "#/components/schemas/ModelParameters"
      
      responses:
        "200":
          description: Model builded succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  buildStatus:
                    description: return flame status
                    type: string
                  fileName:
                    description: uploaded file name in the server
                    type: string
                  modelName:
                    type: string
                  version:
                    type: string
        "400":
          $ref: "#/components/schemas/FileNotProvided"
        "404":
          $ref: "#/components/schemas/BadRequest"
        "405":
          $ref: "#/components/schemas/NotImplemented"
        "500":
          $ref: "#/components/schemas/InternalServerError"
        "503":
          $ref: "#/components/schemas/ServiceUnavailable"
  
  #----------
  # PREDICT
  #----------
  /predict/model/{modelname}/version/{version}:
    put:
      tags:
        - predict
        #- user
      description: 'uploads molecules and runs prediction with specified model '
      summary: Predict 
      operationId: Predict
      parameters:
        - in: path
          required: true
          name: modelname
          description: model id to run prediction
          schema:
            type: string
        - name: version
          in: path
          description: version of the model to run prediction
          required: true
          schema:
            type: string
      
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                SDF:
                  type: string
                  format: binary
      
      responses:
        '200':
          description: prediction successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  Manifest:
                    description: especification of what data is represented
                    type: array
                    items:
                      type: object
                  Meta:
                    description: model metainformation
                    type: object
        "400":
          $ref: "#/components/schemas/FileNotProvided"
        "404":
          $ref: "#/components/schemas/BadRequest"
        "405":
          $ref: "#/components/schemas/NotImplemented"
        "500":
          $ref: "#/components/schemas/InternalServerError"
        "503":
          $ref: "#/components/schemas/ServiceUnavailable"
  
  

#======================
# COMPONENTS
#======================

components:
  schemas:
  
    AnyValue:
      nullable: true
      description: Can be any value, including `null`.

    # -------
    # MODEL
    # -------
    Model:
      type: object
      properties:
        modelID:
          type: string
          format: uuid
        modelNname:
          type: string
        versions:
          type: array
          items:
            type: string
      example:
        modelID: d290f1ee
        modelName: CACO2
        versions: ["0"]

    # ----------------
    # MODEL PARAMETERS
    # ----------------
    ModelParameters:
      description: Model parameters object
      type: object
    
    # -------------
    # MODEL RESULTS
    # -------------
    PredictionResults:
      type: object
      properties:
        Manifest:
          description: especification of what data is represented
          type: array
          items:
            type: object
        Meta:
          description: model metainformation
          type: object

    # ----------
    # MODEL INFO
    # ----------
    ModelInfo:
      type: array
      items:
        type: object
        properties:
          varName:
            type: string
          varDescription:
            type: string
          values:
            $ref: "#/components/schemas/AnyValue"
      example: |
        [
          {
            varName: "nobj",
            varDescription: "number of objects",
            values: 100
          },
          {
            varName: "model"
            varDescription: "model type"
            values: "RF quantitave"
          },
          ...
        ]
  
    # -------
    # STATUS
    # ------- 

    FileNotProvided:
      description: File not provided
    UnauthorizedError:
      description: Access token is missing or invalid
    BadRequest:
      description: Invalid input parameter

    ModelNotFound:
      description: Model not found
    
    VersionNotFound:
      description: Version not found
    
    ResourceAlreadyExists:
      description: The model already exists or the name is used by another model

    InternalServerError:
      description: The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.

    NotImplemented:
      description: The request method is not supported by the server and cannot be handled.

    ServiceUnavailable:
      description: The server is not ready to handle the request.